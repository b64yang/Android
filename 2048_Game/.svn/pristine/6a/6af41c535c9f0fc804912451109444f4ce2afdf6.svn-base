package uwaterloo.ca.lab3_203_08;

import android.app.Activity;
import android.hardware.Sensor;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutCompat;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import org.w3c.dom.Text;

import java.util.Arrays;
import java.util.Timer;
import java.util.TimerTask;

import uwaterloo.ca.sensortoy.LineGraphView;

public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        RelativeLayout l = (RelativeLayout) findViewById(R.id.layout1);
        TextView outputView = (TextView) findViewById(R.id.direction);

        GameLoopTask gameLoop = new GameLoopTask(this, l, getApplicationContext());

        final int GAMEBOARD_SIZE = 1000;
        l.getLayoutParams().width = GAMEBOARD_SIZE;
        l.getLayoutParams().height = GAMEBOARD_SIZE;
        l.setBackgroundResource(R.drawable.gameboard);

        Timer gameTimer = new Timer();

        gameTimer.schedule(gameLoop, 50, 50);

        SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);

        Sensor accelSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
        SensorEventListener accelListener = new AccelerometerEventListener(outputView, gameLoop);
        sensorManager.registerListener(accelListener, accelSensor, SensorManager.SENSOR_DELAY_GAME);

//        LinearLayout myRL = (LinearLayout) findViewById(R.id.layout1);
//
//        //Set up an animation timer of 16ms (60 frames per second)
//        Timer myTimer = new Timer();
//        AnimationHandler myAnimHandler = new AnimationHandler(this, myImage);
//        myTimer.schedule(myAnimHandler, 16, 16);
//
//        //Set up a control button to toggle the movement direction of the image
//        Button myButton1 = new Button(getApplicationContext());
//        myButton1.setX(400f);
//        myButton1.setY(700f);
//        myButton1.setText("Toggle!");
//        myButton1.setOnClickListener(new ButtonHandler(myAnimHandler));
//
//        myRL.addView(myButton1);

    }
}

//Explicit Class of a ButtonHandler
class ButtonHandler implements View.OnClickListener{

    //Keep track of the animation handler
    //so that we can call the toggleDirection() method in the animation handler.
    public AnimationHandler myAnimHandler;

    public ButtonHandler(AnimationHandler myAHand){
        myAnimHandler = myAHand;
    }

    public void onClick(View myView){
        myAnimHandler.toggleDirection();
    }

}


class AnimationHandler extends TimerTask{

    private Activity myActivity;
    private ImageView myImage;

    private float positionX;
    private float velocityX;

    private final float LEFT_BOUND = 30f;
    private final float RIGHT_BOUND = 500f;

    public AnimationHandler(Activity myAct, ImageView myImg){
        myActivity = myAct;
        myImage = myImg;
        positionX = LEFT_BOUND;
        velocityX = 5;
    }

    public void toggleDirection(){
        velocityX *= -1;
    }

    //Remember, you need to run this on UI Thread.
    //You will need a reference of the MainActivity in order to do so.
    public void run(){
        myActivity.runOnUiThread(
                new Runnable(){
                    public void run(){

                        //Constant Velocity Displacement
                        positionX += velocityX;

                        //Boundary Checking
                        if(positionX < LEFT_BOUND)
                            positionX = LEFT_BOUND;
                        else if (positionX > RIGHT_BOUND)
                            positionX = RIGHT_BOUND;

                        //Update the image position
                        myImage.setX(positionX);
                    }
                }
        );
    }

}
